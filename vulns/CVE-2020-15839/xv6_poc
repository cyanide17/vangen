/* 
 * Name: PoC using learned I/O Patterns
 * Date: 2020-09-18
 * Author: cwmyung
 */

/*** xv6/Makefile ***********************************************************************************************************************
 *
 *   QEMUOPTS = -device e1000e,netdev=mynet1 -netdev user,id=mynet1,hostfwd=tcp::1234-:22 -device ES1370 -trace e1000\* $(DEFAULTOPTS)
 *
 *** xv6/pci.c **************************************************************************************************************************
 *
 *   static int pci_scan_bus() {
 *     ...
 *     for(df.dev = ...) {
 *       ...
 *     }
 *     test();
 *
 *     return totaldev;
 *   }
 ****************************************************************************************************************************************
 */

static int test()
{
  int i, res;
  uint bar_addr[6];
  uint cnt = 2;
  for (i = 0; i < 6; i++) {
    bar_addr[i] = pci_func_list[2].bar[i];
  }
  /* Pattern : 1 */
  writel(0x8100, bar_addr[0]+0x38);
  writel(0x0, bar_addr[0]+0x458);
  writel(0x1a00000, bar_addr[0]+0xb608);
  res = readl(bar_addr[0]+0xb600);
  res = readl(bar_addr[0]+0xb604);
  res = readl(bar_addr[0]+0xb608);
  res = readl(bar_addr[0]+0xb600);
  res = readl(bar_addr[0]+0xb604);
  res = readl(bar_addr[0]+0xb614);

  /* Pattern : 2 */
  writel(0xffffffff, bar_addr[0]+0xd8);
  /* It should be 0xff in offset 0x100 */
  writel(0xff, bar_addr[0]+0x100);
  res = readl(bar_addr[0]+0x400);

  /* Pattern : 3 */
  writel(0x1040420, bar_addr[0]+0x2828);
  writel(0x1040420, bar_addr[0]+0x2928);
  writel(0x20, bar_addr[0]+0x2820);
  writel(0x20, bar_addr[0]+0x282c);
  writel(0xc3, bar_addr[0]+0xe8);
  writel(0xc3, bar_addr[0]+0xec);
  writel(0xc3, bar_addr[0]+0xf0);
  res = readl(bar_addr[0]+0x18);

  /* Pattern : 4 */
  writel(0x1de3c000, bar_addr[0]+0x2800);
  writel(0x0, bar_addr[0]+0x2804);
  /*It should be 0xffffffff in offset 0x2808*/
  writel(0xffffffff, bar_addr[0]+0x2808);
  writel(0x0, bar_addr[0]+0x2810);
  writel(0x0, bar_addr[0]+0x2818);
  /*It should be non-zero in offset 0x2810*/
  writel(0xff, bar_addr[0]+0x2810);
  writel(0x0, bar_addr[0]+0x2818);
  res = readl(bar_addr[0]+0x5000);

  /* Pattern : 5 */
  writel(0x1dea2000, bar_addr[0]+0x3800);
  writel(0x0, bar_addr[0]+0x3804);
  writel(0x1000, bar_addr[0]+0x3808);
  writel(0x0, bar_addr[0]+0x3810);
  writel(0x0, bar_addr[0]+0x3818);
  writel(0x0, bar_addr[0]+0x3810);
  writel(0x0, bar_addr[0]+0x3818);
  writel(0x8, bar_addr[0]+0x3820);
  writel(0x20, bar_addr[0]+0x382c);
  res = readl(bar_addr[0]+0x3828);

  /* Pattern : 6 */
  writel(0x58140245, bar_addr[0]+0x0);
  DMA_alloc(0x1c4d2802, 0x5a);
  dma_writel(0x0, P2V(0x5c044));
  /* It should be bar_addr[0]+0x400 in DMA zone */
  dma_writel(bar_addr[0]+0x400, P2V(0x1dea2000));
  dma_writel(0x0, P2V(0x1dea200c));
  dma_writel(0x200005a, P2V(0x1dea2008));
  dma_writel(0x8b00005a, P2V(0x1dea2008));
  writel(0x1, bar_addr[0]+0x3818);
  res = dma_readl(P2V(0x1dea200c));
  DMA_free(0x1c4d2802, 0x5a);


  /* Pattern : 7 */
  writel(0x103f0fa, bar_addr[0]+0x400);
  res = readl(bar_addr[0]+0x4000);
  res = readl(bar_addr[0]+0x4074);
  res = readl(bar_addr[0]+0x4088);
  res = readl(bar_addr[0]+0x408c);
  res = readl(bar_addr[0]+0x4078);
  res = readl(bar_addr[0]+0x407c);
  res = readl(bar_addr[0]+0x40ac);
  res = readl(bar_addr[0]+0x4010);
  res = readl(bar_addr[0]+0x4048);
  res = readl(bar_addr[0]+0x404c);
  res = readl(bar_addr[0]+0x4050);
  res = readl(bar_addr[0]+0x4054);
  res = readl(bar_addr[0]+0x4080);
  res = readl(bar_addr[0]+0x4090);
  res = readl(bar_addr[0]+0x4094);
  res = readl(bar_addr[0]+0x40a0);
  res = readl(bar_addr[0]+0x40a4);
  res = readl(bar_addr[0]+0x40f0);
  res = readl(bar_addr[0]+0x40f4);
  res = readl(bar_addr[0]+0x40d4);
  res = readl(bar_addr[0]+0x4004);
  res = readl(bar_addr[0]+0x400c);
  res = readl(bar_addr[0]+0x403c);
  res = readl(bar_addr[0]+0x40f8);
  res = readl(bar_addr[0]+0x40fc);
  res = readl(bar_addr[0]+0x40bc);
  res = readl(bar_addr[0]+0x40b4);
  res = readl(bar_addr[0]+0x40b8);
  return 0;

}
